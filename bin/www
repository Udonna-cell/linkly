#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('linkly:server');
var http = require('http');
var WebSocket = require('ws');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create WebSocket server using the HTTP server.
 */

var wss = new WebSocket.Server({ server });

/**
 * WebSocket connection handling.
 */
wss.on('connection', function(ws) {
  console.log('A new WebSocket client connected!');

  // Send a welcome message to the client
  ws.send('Welcome to the WebSocket server!');

  // Handle messages from the WebSocket client
  ws.on('message', function(message) {
    console.log(JSON.parse(message).userId);

    // Echo the message back to the client
    ws.send(`You said: ${message}`);

    ws.send(JSON.stringify({name: message.toString()}))
    // Optionally, broadcast the message to all connected clients
    // wss.clients.forEach(function(client) {
    //   if (client !== ws && client.readyState === WebSocket.OPEN) {
    //     client.send(`${message}`);
    //   }
    // });
  });

  // Handle WebSocket client disconnection
  ws.on('close', function() {
    console.log('A WebSocket client disconnected.');
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;

  debug('Listening on ' + bind);
}
